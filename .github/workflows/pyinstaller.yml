name: "pyinstaller"

on:
  push:
    tags:
      - "v*.*.*"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:

jobs:
  linux_x86_64_build:
    name: Linux x86-64 build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8' 
      - name: pyinstaller Linux build
        run: |
          pip3 install pyinstaller
          if [ -f requirements.txt ]; then
            pip3 install -r requirements.txt
          else
            pip3 install .
          fi
          pyinstaller \
            --name wordfence \
            --onefile \
            --hidden-import wordfence.cli.scan \
            --hidden-import wordfence.cli.scan.config \
            pyinstaller-wordfence.py
      - name: Archive release
        run: tar -C ./dist -czvf ./wordfence-cli-linux-x86-64.tar.gz wordfence
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: wordfence-cli-linux-x86-64
          path: wordfence-cli-linux-x86-64.tar.gz
  linux_aarch64_build:
    name: Linux aarch64 build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: pyinstaller onefile Linux aarch64 build
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu20.04
          dockerRunArgs: --volume "${PWD}:/work"
          install: |
            apt-get update -q -y
            apt-get install -q -y python3.8 python3-pip
          run: |
            cd /work
            pip3 install pyinstaller 
            if [ -f requirements.txt ]; then
                pip3 install -r requirements.txt
            else
                pip3 install .
            fi
            pyinstaller \
              --name wordfence \
              --onefile \
              --hidden-import wordfence.cli.scan \
              --hidden-import wordfence.cli.scan.config \
              pyinstaller-wordfence.py
      - name: Archive release
        run: tar -C ./dist -czvf ./wordfence-linux-aarch64.tar.gz wordfence
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: wordfence-cli-linux-aarch64
          path: wordfence-cli-linux-aarch64.tar.gz
  release:
    name: Release
    runs-on: ubuntu-20.04
    needs: [linux_x86_64_build, linux_aarch64_build]
    # Only release if we're building from a tag
    if: github.ref_type == 'tag'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./wordfence-cli-linux-x86-64/*
            ./wordfence-cli-linux-aarch64/*
          draft: true
